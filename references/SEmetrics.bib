% This file was created with JabRef 2.10.
% Encoding: ISO8859_1


@Article{Chidamber1994,
  Title                    = {A metrics suite for object oriented design},
  Author                   = {S.R. Chidamber and C.F. Kemerer},
  Journal                  = {IEEE Transactions on Software Engineering},
  Year                     = {1994},

  Month                    = {Jun},
  Number                   = {6},
  Pages                    = {476--493},
  Volume                   = {20},

  Abstract                 = {Given the central role that software development plays in the delivery and application of information technology, managers are increasingly focusing on process improvement in the software development area. This demand has spurred the provision of a number of new and/or improved approaches to software development, with perhaps the most prominent being object-orientation (OO). In addition, the focus on process improvement has increased the demand for software measures, or metrics with which to manage the process. The need for such metrics is particularly acute when an organization is adopting a new technology for which established practices have yet to be developed. This research addresses these needs through the development and implementation of a new suite of metrics for OO design. Metrics developed in previous research, while contributing to the field's understanding of software development processes, have generally been subject to serious criticisms, including the lack of a theoretical base. Following Wand and Weber (1989), the theoretical base chosen for the metrics was the ontology of Bunge (1977). Six design metrics are developed, and then analytically evaluated against Weyuker's (1988) proposed set of measurement principles. An automated data collection tool was then developed and implemented to collect an empirical sample of these metrics at two field sites in order to demonstrate their feasibility and suggest ways in which managers may use these metrics for process improvement},
  Doi                      = {10.1109/32.295895},
  ISSN                     = {0098-5589},
  Keywords                 = {object-oriented methods;object-oriented programming;software metrics;automated data collection tool;measurement principles;metrics suite;object oriented design;object oriented programming;organization;process improvement;software development;software measures;Application software;Engineering management;Information management;Information technology;Ontologies;Programming;Software development management;Software engineering;Software measurement;Technology management}
}


@inproceedings{ZimmermannPR2007,
 author = {Zimmermann, Thomas and Premraj, Rahul and Zeller, Andreas},
 title = {Predicting Defects for Eclipse},
 booktitle = {Proceedings of the Third International Workshop on Predictor Models in Software Engineering},
 series = {PROMISE'07},
 year = {2007},
 isbn = {0-7695-2954-2},
 pages = {9--},
 url = {http://dx.doi.org/10.1109/PROMISE.2007.10},
 doi = {10.1109/PROMISE.2007.10},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 


@INPROCEEDINGS{Zhang2009, 
author={H. Zhang}, 
booktitle={IEEE International Conference on Software Maintenance}, 
title={An investigation of the relationships between lines of code and defects}, 
year={2009}, 
pages={274--283}, 
abstract={It is always desirable to understand the quality of a software system based on static code metrics. In this paper, we analyze the relationships between lines of code (LOC) and defects (including both pre-release and post-release defects). We confirm the ranking ability of LOC discovered by Fenton and Ohlsson. Furthermore, we find that the ranking ability of LOC can be formally described using Weibull functions. We can use defect density values calculated from a small percentage of largest modules to predict the number of total defects accurately. We also find that, given LOC we can predict the number of defective components reasonably well using typical classification techniques. We perform an extensive experiment using the public Eclipse dataset, and replicate the study using the NASA dataset. Our results confirm that simple static code attributes such as LOC can be useful predictors of software quality.}, 
keywords={program diagnostics;software metrics;software quality;Eclipse dataset;lines of code;post-release defects;pre-release defects;software system quality;static code metrics;Density measurement;Lab-on-a-chip;Laboratories;NASA;Packaging machines;Predictive models;Software metrics;Software quality;Software systems;System testing}, 
doi={10.1109/ICSM.2009.5306304}, 
ISSN={1063-6773}, 
month={Sept},}


@Article{mccabe76,
       title   = {A Complexity Measure},
       author  = {T J McCabe},
       pages   = {308--320},
       journal = {IEEE Transactions on Software Engineering},
       year    = {1976},
       volume  = {2},
       month   = {December},
       number  = {4}
}

@book{Halstead77,
   Author = {M.H.  Halstead},
   Title = {Elements of software science},
   Publisher = {Elsevier},
   Address = {New York ; Oxford},
   Series = {Elsevier Computer Science Library. Operating And Programming Systems Series; 2},
   Year = {1977} }

@Article{Madeyski2015,
author="Madeyski, Lech and Jureczko, Marian",
title="Which process metrics can significantly improve defect prediction models? An empirical study",
journal="Software Quality Journal",
year="2015",
volume="23",
number="3",
pages="393--422",
abstract="The knowledge about the software metrics which serve as defect indicators is vital for the efficient allocation of resources for quality assurance. It is the process metrics, although sometimes difficult to collect, which have recently become popular with regard to defect prediction. However, in order to identify rightly the process metrics which are actually worth collecting, we need the evidence validating their ability to improve the product metric-based defect prediction models. This paper presents an empirical evaluation in which several process metrics were investigated in order to identify the ones which significantly improve the defect prediction models based on product metrics. Data from a wide range of software projects (both, industrial and open source) were collected. The predictions of the models that use only product metrics (simple models) were compared with the predictions of the models which used product metrics, as well as one of the process metrics under scrutiny (advanced models). To decide whether the improvements were significant or not, statistical tests were performed and effect sizes were calculated. The advanced defect prediction models trained on a data set containing product metrics and additionally Number of Distinct Committers (NDC) were significantly better than the simple models without NDC, while the effect size was medium and the probability of superiority (PS) of the advanced models over simple ones was high p=.016, which is a substantial finding useful in defect prediction. A similar result with slightly smaller PS was achieved by the advanced models trained on a data set containing product metrics and additionally all of the investigated process metrics p=.038. The advanced models trained on a data set containing product metrics and additionally Number of Modified Lines (NML) were significantly better than the simple models without NML, but the effect size was small p=.038. Hence, it is reasonable to recommend the NDC process metric in building the defect prediction models.",
issn="1573-1367",
doi="10.1007/s11219-014-9241-7",
url="http://dx.doi.org/10.1007/s11219-014-9241-7"
}

@InProceedings{JureczkoS10,
	author = {Jureczko, Marian and Spinellis, Diomidis},
	title = {Using Object-Oriented Design Metrics to Predict Software Defects},
	Booktitle = {Models and Methodology of System Dependability.  Proceedings of {RELCOMEX} 2010: Fifth International Conference on Dependability of Computer Systems {DepCoS}},
	series = {Monographs of System Dependability},
	year = {2010},
	isbn = {978-83-7493-526-5},
	pages = {69--81},
	publisher = {Oficyna Wydawnicza Politechniki Wroc{\l}awskiej},
	URL="http://www.dmst.aueb.gr/dds/pubs/conf/2010-DepCoS-RELCOMEX-ckjm-defects/html/JS10.html",
	address = {Wroc{\l}aw, Poland}
}


@inproceedings{KrishnanSLG2011,
 author = {Krishnan, Sandeep and Strasburg, Chris and Lutz, Robyn R. and Go\v{s}eva-Popstojanova, Katerina},
 title = {Are Change Metrics Good Predictors for an Evolving Software Product Line?},
 booktitle = {Proceedings of the 7th International Conference on Predictive Models in Software Engineering (Promise'11)},
 series = {Promise'11},
 year = {2011},
 isbn = {978-1-4503-0709-3},
 location = {Banff, Alberta, Canada},
 pages = {7:1--7:10},
 articleno = {7},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2020390.2020397},
 doi = {10.1145/2020390.2020397},
 acmid = {2020397},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {change metrics, failure-prone files, post-release defects, prediction, reuse, software product lines},
} 

@ARTICLE{BansiyaD02, 
author={J. Bansiya and C. G. Davis}, 
journal={IEEE Transactions on Software Engineering}, 
title={A hierarchical model for object-oriented design quality assessment}, 
year={2002}, 
volume={28}, 
number={1}, 
pages={4--17}, 
abstract={The paper describes an improved hierarchical model for the assessment of high-level design quality attributes in object-oriented designs. In this model, structural and behavioral design properties of classes, objects, and their relationships are evaluated using a suite of object-oriented design metrics. This model relates design properties such as encapsulation, modularity, coupling, and cohesion to high-level quality attributes such as reusability, flexibility, and complexity using empirical and anecdotal information. The relationship or links from design properties to quality attributes are weighted in accordance with their influence and importance. The model is validated by using empirical and expert opinion to compare with the model results on several large commercial object-oriented systems. A key attribute of the model is that it can be easily modified to include different relationships and weights, thus providing a practical quality assessment tool adaptable to a variety of demands}, 
keywords={data encapsulation;object-oriented programming;software metrics;software quality;behavioral design properties;cohesion;commercial object-oriented systems;coupling;design properties;encapsulation;expert opinion;hierarchical model;high-level design quality attributes;high-level quality attributes;modularity;object-oriented design metrics;object-oriented design quality assessment;product metrics;quality assessment tool;quality attributes;reusability;Object oriented modeling;Quality assessment}, 
doi={10.1109/32.979986}, 
ISSN={0098-5589}, 
month={Jan},}



@inproceedings{MoserPS2008,
 author = {Moser, Raimund and Pedrycz, Witold and Succi, Giancarlo},
 title = {A Comparative Analysis of the Efficiency of Change Metrics and Static Code Attributes for Defect Prediction},
 booktitle = {Proceedings of the 30th International Conference on Software Engineering (ICSE'08)},
 series = {ICSE'08},
 year = {2008},
 isbn = {978-1-60558-079-1},
 location = {Leipzig, Germany},
 pages = {181--190},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1368088.1368114},
 doi = {10.1145/1368088.1368114},
 acmid = {1368114},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {cost-sensitive classification, defect prediction, software metrics},
} 


@INPROCEEDINGS{Lincke2008,
  author = {Lincke, R\"{u}diger and Lundberg, Jonas and L\"{o}we, Welf},
  title = {Comparing software metrics tools},
  booktitle = {Proceedings of the 2008 International Symposium on Software Testing
	and Analysis (ISSTA'08)},
  year = {2008},
  series = {ISSTA'08},
  pages = {131--142},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1390648},
  doi = {10.1145/1390630.1390648},
  isbn = {978-1-60558-050-0},
  keywords = {comparing tools, software quality metrics},
  location = {Seattle, WA, USA},
  numpages = {12},
  url = {http://doi.acm.org/10.1145/1390630.1390648}
}



